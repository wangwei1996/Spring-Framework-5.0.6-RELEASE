门面模式  Facade Pattern


简单工厂模式
  封装对象创建细节，只需要提要求即可
  需要创建的对象较少，客户端不关心对象是如何创建的

工厂方法模式

抽象工厂模式： 提供一个创建一系列相关或相互依赖对象的接口
   抽象工厂模式侧重产品族
   解决了工厂模式只支持生产一种产品的弊端
   
   
注解:
  提供一种为程序元素设置元数据的方法.   
     元数据是添加到程序元素如方法，字段，类和包上的额外信息 
	 注解是分散式的元数据设置方式，xml是集中式元数据设置方式
	 注解不能直接干扰程序代码的执行
	 一个接口，继承子Annotation接口
	 
	注解的功能： 
	 作为特定的标记，用于告诉编译器一些信息
     编译时动态处理，如动态生成代码
	 运行时动态处理，作为额外信息的载体，如获取注解信息
	 
	注解分类
        1. 标准注解
              Override,Deprecated,SupperessWarnings
        2. 元注解,用于修饰注解的注解，通常用于自定义注解
              @Retention 注解的生命周期
			  @Target 指定注解的作用目标
			  @Documented 注解是否应当被包含在JavaDoc文档中
			  @Inherited 是否允许子类继承该注解
        3. 自定义注解
   注解不会直接干扰程序代码的执行，若代码中不对注解进行处理，注解是没有什么作用的   


自研框架IOC容器的实现
创建注解 -> 提取标记对象 -> 实现容器   -> 依赖注入   


单例模式无法完全实现单例，可以通过反射来破坏。可以使用枚举方式来实现单例模式 


Spring 主心骨
    1. 解析配置
	2. 定位与注册对象
	3. 注入对象
	
解决了关键的问题： 将对象之间的关系转为使用配置来管理
      即依赖注入：依赖关系在Spring的IOC容器中管理	